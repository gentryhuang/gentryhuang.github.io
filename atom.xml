<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-03T14:26:00.014Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>uml基础</title>
    <link href="http://yoursite.com/2018/05/10/uml/"/>
    <id>http://yoursite.com/2018/05/10/uml/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2020-07-03T14:26:00.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UML概述"><a href="#UML概述" class="headerlink" title="UML概述"></a>UML概述</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>统一建模语言（缩写UML），非专利的第三代建模和规约语言</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>UML是一种开放的方法</li><li>UML用于说明、可视化、构建和编写一个正在开发的面向对象的、软件密集系统的制品的开放方法</li><li>UML展现了一系列最佳工程的实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层面已经被验证有效</li></ol><h2 id="UML分类"><a href="#UML分类" class="headerlink" title="UML分类"></a>UML分类</h2><ol><li><p>结构式图形</p><p>强调的是系统式的建模，具体包含静态图（<em>类图</em>、对象图、包图）、实现图（组件图、部署图）、剖面图以及复合结构图</p></li><li><p>行为式图形</p><p> 强调系统模型中触发的事件，具体包含活动图、状态图以及用例图</p></li><li><p>交互式图形</p><p>属于行为式图形子集合，强调系统模型中资源流程。具体包含通信图、交互概念图、<em>时序图</em>  以及时间图</p><p>​</p></li></ol><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>用于表示类、接口、实例等之间相互的静态关系。虽然名字叫类图，但类图中并不只有类，还可能包括权限、属性、方法等</p><h2 id="UML记忆方式"><a href="#UML记忆方式" class="headerlink" title="UML记忆方式"></a>UML记忆方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. uml箭头：从子类指向父类，只有知道对方信息时才能指向对方方向</span><br><span class="line">2. 空心三角箭头：继承或实现，实线-继承：积极的，强关联，关联，通常一个类中有一个类的对象做属性；虚线-实现：消极的，弱关联，依赖</span><br><span class="line">3. 空心菱形：聚合，（注：可以看作一个盘子，可以放很多相同的东西（箭头方向所指的类），聚在一起。是has a的关系）弱关联</span><br><span class="line">4. 实心菱形：组合，（注：代表器皿里有实体结构存在，组合起来成为一个。是contains-a的关系）强关联</span><br></pre></td></tr></table></figure><ol><li><p>uml箭头：从子类指向父类，定义子类时需要通过<em>extends</em>关键字指定父类，只有知道对方信息时才能指向对方方向</p></li><li><p>实线-继承 | 虚线-实现</p><p><img src="/2018/05/10/uml/sx.png" alt> ​</p></li><li><p>空心菱形-聚合</p><p><img src="/2018/05/10/uml/jh.png" alt></p></li><li><p>实心菱形-组合</p><p><img src="/2018/05/10/uml/zh.png" alt></p><ol start="5"><li>组合关系中常见的数字表达</li></ol></li></ol><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">◆常见数字表达及含义，假设有A类和B类，数字标记在A类侧</span><br><span class="line">◆0..1：0或1个实例    在系统某一时刻，b的实例可以与0个或1个A实例相关</span><br><span class="line">◆0..*：0或多个实例　  在系统某一时刻，b的实例可以与0个或多个A实例相关</span><br><span class="line">◆1..1：1个实例.       b的实例可以和1个A实例相关</span><br><span class="line">◆1只能有一个实例.     b的实例可以和1个A实例相关</span><br><span class="line">◆1..*：至少有一个实例.　　b实例可以与一个或多个A实例相关</span><br></pre></td></tr></table></figure><h2 id="UML时序图"><a href="#UML时序图" class="headerlink" title="UML时序图"></a>UML时序图</h2><ol><li><p>是显示对象之间交互的图，这些对象是按照时间顺序排列的</p></li><li><p>时序图中 包含的建模元素</p><p>对象（Actor）、生命线（lifeline）、控制焦点（Focus of control）、消息（Message）等</p></li><li><p>时序图示例</p><p><img src="/2018/05/10/uml/sxt.png" alt></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">竖线代表生命线</span><br><span class="line"></span><br><span class="line">对象：c：client ，s：server，d：device 代表实例</span><br><span class="line"></span><br><span class="line">消息：箭头代表的元素(open,work等)</span><br><span class="line"></span><br><span class="line">竖矩形代表实例处于某种活动中，</span><br><span class="line"></span><br><span class="line">实线实心箭头：代表方法调用，同步调用</span><br><span class="line"></span><br><span class="line">实线非实心箭头：代表异步调用</span><br><span class="line"></span><br><span class="line">虚线：代表返回</span><br></pre></td></tr></table></figure></li></ol><h2 id="UML类图讲解"><a href="#UML类图讲解" class="headerlink" title="UML类图讲解"></a>UML类图讲解</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+　　　　公共方法</span><br><span class="line"></span><br><span class="line">-　　　　private权限</span><br><span class="line"></span><br><span class="line">#　　　　protected权限 包内和包外继承的子类都能引用</span><br><span class="line"></span><br><span class="line">~　　　　default权限（包权限）只有包内能引用</span><br><span class="line"></span><br><span class="line">下划线　  静态 Static</span><br><span class="line"></span><br><span class="line">斜体　　  抽象类（或抽象方法）（包含抽象方法的必是抽象类）（类和至少一个方法都是斜体）</span><br><span class="line"></span><br><span class="line">方法　　  可以带参，可以不带参</span><br><span class="line"></span><br><span class="line">　　　　  返回值写到冒号后边，void不用加</span><br><span class="line"></span><br><span class="line">注意：下图类名应该为斜体，因为有抽象方法study（），所以GeelyClass为抽象类，应该为斜体。</span><br></pre></td></tr></table></figure><p><img src="/2018/05/10/uml/umlxj.png" alt></p><h2 id="UML整体讲解"><a href="#UML整体讲解" class="headerlink" title="UML整体讲解"></a>UML整体讲解</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">设计模式中的对象关系:</span><br><span class="line"></span><br><span class="line"> 依赖关系　　虚线箭头，箭头方向指向被依赖的部分</span><br><span class="line"> 组合关系　　实心菱形</span><br><span class="line"> 聚合关系　　空心菱形（想象成盘子，盛东西，盘子的多，另一方少）</span><br><span class="line"> 关联关系　　实线箭头，箭头指向被关联的部分  类与类的连接，（它使一个类知道另一个类的属性和方法，关联关  系一般用成员变量实现）</span><br><span class="line"> 继承　　　　空心三角形实线</span><br><span class="line"> 实现　　　　空心三角形虚线</span><br><span class="line">注意：</span><br><span class="line"> 实现接口有两种方式，一种是棒棒糖的形式，另一种是虚线空心三角形的方式</span><br></pre></td></tr></table></figure><p><img src="/2018/05/10/uml/umlqxj.png" alt></p><h2 id="UML中部分对比"><a href="#UML中部分对比" class="headerlink" title="UML中部分对比"></a>UML中部分对比</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.1　　关联和依赖的对比</span><br><span class="line">关联是a类中存在b类对象，企鹅类中有气候类的属性</span><br><span class="line">依赖是a类成员方法中有b类的属性，动物新陈代谢方法中有水和空气的属性，只有调这个方法的时候，才可能临时用一下</span><br><span class="line">1.2　　组合和聚合的对比</span><br><span class="line">组合有相同的生命周期，鸟有翅膀，鸟死了，翅膀不复存在</span><br><span class="line">大雁群有大雁，一只大雁挂了，大雁群不会消失</span><br><span class="line">1.3　　继承和实现的对</span><br><span class="line">实线：继承</span><br><span class="line">虚线：实现</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UML概述&quot;&gt;&lt;a href=&quot;#UML概述&quot; class=&quot;headerlink&quot; title=&quot;UML概述&quot;&gt;&lt;/a&gt;UML概述&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
